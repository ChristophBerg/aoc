use strict;
use warnings;

my %rules2;
my %rules3;

while (<DATA>) {
	if (m!(.)(.)/(.)(.) => (.*)!) {
		$rules2{"$1$2".
			"$3$4"} = "$5";
		$rules2{"$2$1".
			"$4$3"} = "$5";
		$rules2{"$3$4".
			"$1$2"} = "$5";
		$rules2{"$4$3".
			"$2$1"} = "$5";
		$rules2{"$1$3".
			"$2$4"} = "$5";
		$rules2{"$2$4".
			"$1$3"} = "$5";
		$rules2{"$3$1".
			"$4$2"} = "$5";
		$rules2{"$4$2".
			"$3$1"} = "$5";
	} elsif (m!(.)(.)(.)/(.)(.)(.)/(.)(.)(.) => (.*)!) {
		$rules3{"$1$2$3".
			"$4$5$6".
			"$7$8$9"} = "$10";
		$rules3{"$7$8$9".
			"$4$5$6".
			"$1$2$3"} = "$10";
		$rules3{"$3$2$1".
			"$6$5$4".
			"$9$8$7"} = "$10";
		$rules3{"$9$8$7".
			"$6$5$4".
			"$3$2$1"} = "$10";
		$rules3{"$1$4$7".
			"$2$5$8".
			"$3$6$9"} = "$10";
		$rules3{"$3$6$9".
			"$2$5$8".
			"$1$4$7"} = "$10";
		$rules3{"$9$6$3".
			"$8$5$2".
			"$7$4$1"} = "$10";
	} else { die }
}

my @grid = (
 ['.', '#', '.'],
 ['.', '.', '#'],
 ['#', '#', '#'],
);

my $iter = 0;
while (1) {
	print "$iter:\n";
	print map { "@{$_}\n" } @grid;
	#last if ($iter++ >= 5); # 21a
	last if ($iter++ >= 18); # 21b

	my @newgrid;
	if (@grid % 2 == 0) {
		for (my $y = 0; $y < @grid; $y += 2) {
			for (my $x = 0; $x < @grid; $x += 2) {
				my $key = $grid[$y]->[$x]   . $grid[$y+1]->[$x] .
					  $grid[$y]->[$x+1] . $grid[$y+1]->[$x+1];
				#print "key is $key => $rules2{$key}\n";
				my @repl = split m!/!, $rules2{$key};
				@newgrid[$y/2*3] .= $repl[0];
				@newgrid[$y/2*3+1] .= $repl[1];
				@newgrid[$y/2*3+2] .= $repl[2];
			}
		}
	} elsif (@grid % 3 == 0) {
		for (my $y = 0; $y < @grid; $y += 3) {
			for (my $x = 0; $x < @grid; $x += 3) {
				my $key = $grid[$y]->[$x]   . $grid[$y+1]->[$x]   . $grid[$y+2]->[$x] .
					  $grid[$y]->[$x+1] . $grid[$y+1]->[$x+1] . $grid[$y+2]->[$x+1] .
					  $grid[$y]->[$x+2] . $grid[$y+1]->[$x+2] . $grid[$y+2]->[$x+2];
				#print "key is $key => $rules3{$key}\n";
				my @repl = split m!/!, $rules3{$key};
				@newgrid[$y/3*4] .= $repl[0];
				@newgrid[$y/3*4+1] .= $repl[1];
				@newgrid[$y/3*4+2] .= $repl[2];
				@newgrid[$y/3*4+3] .= $repl[3];
			}
		}
	} else { die }

	@grid = map { [ split // ] } @newgrid;
}

my $sum;
foreach my $row (@grid) {
	foreach my $cell (@$row) {
		$sum++ if $cell eq '#';
	}
}
print "There are $sum pixels on\n";

__DATA__
../.. => #.#/##./..#
#./.. => ###/.##/..#
##/.. => ..#/.#./##.
.#/#. => ###/.##/###
##/#. => ###/#.#/.##
##/## => #.#/..#/.#.
.../.../... => ..../.#../##.#/#.#.
#../.../... => .##./#.../.##./#..#
.#./.../... => ...#/.#.#/###./##.#
##./.../... => #.##/..#./.#.#/..##
#.#/.../... => ..#./.#../.#.#/###.
###/.../... => #.#./.#../.#../....
.#./#../... => ..#./##../.###/###.
##./#../... => ..#./###./#.#./#.#.
..#/#../... => ..##/###./.#.#/#...
#.#/#../... => #.../...#/.#.#/#...
.##/#../... => ###./####/.###/#.##
###/#../... => #.../#.##/#.../.#.#
.../.#./... => .##./#.#./#..#/..#.
#../.#./... => #.../##.#/#.#./.##.
.#./.#./... => ##../.###/####/....
##./.#./... => #.#./..../###./.#.#
#.#/.#./... => ..../..../#.##/.##.
###/.#./... => ####/#.##/.###/#.#.
.#./##./... => ####/#..#/#.##/.##.
##./##./... => .#.#/#.##/####/.###
..#/##./... => .##./...#/.#.#/..#.
#.#/##./... => #..#/...#/.#../.##.
.##/##./... => ##../#..#/##../..##
###/##./... => ..##/..../#.../..##
.../#.#/... => ###./#.../##.#/.#.#
#../#.#/... => ..#./...#/#..#/#.##
.#./#.#/... => ##../..#./##../###.
##./#.#/... => .#.#/#.#./####/.##.
#.#/#.#/... => .##./.##./#.##/#..#
###/#.#/... => #..#/.##./..#./##..
.../###/... => ###./#..#/.###/#.##
#../###/... => #.../#..#/####/##..
.#./###/... => ###./.##./#..#/.###
##./###/... => #..#/##../.##./#.#.
#.#/###/... => ..#./...#/#.../...#
###/###/... => ...#/##../...#/#.##
..#/.../#.. => ##.#/.#.#/.##./###.
#.#/.../#.. => ###./#..#/.#.#/#.##
.##/.../#.. => ...#/.#.#/.###/###.
###/.../#.. => .#../...#/..#./.#..
.##/#../#.. => .#../...#/.##./..#.
###/#../#.. => .###/##.#/#.##/.###
..#/.#./#.. => ##.#/##../##../#...
#.#/.#./#.. => #.../.###/#.#./#...
.##/.#./#.. => ###./#.##/###./####
###/.#./#.. => .#../..##/##.#/##.#
.##/##./#.. => ##.#/##../.##./...#
###/##./#.. => .#.#/.#../####/.##.
#../..#/#.. => ..##/###./...#/##..
.#./..#/#.. => .#../...#/.#../..##
##./..#/#.. => ###./..##/###./.##.
#.#/..#/#.. => ####/.#.#/...#/..##
.##/..#/#.. => #..#/.#../#.##/####
###/..#/#.. => .#../#.##/#.##/.#..
#../#.#/#.. => ..#./#.##/.#../.##.
.#./#.#/#.. => ##../#.../#.#./###.
##./#.#/#.. => #..#/.##./####/.#..
..#/#.#/#.. => ##.#/..#./..#./.#.#
#.#/#.#/#.. => .#../..#./..#./..##
.##/#.#/#.. => ##../#.##/#.#./#.##
###/#.#/#.. => ##.#/..##/##../##.#
#../.##/#.. => .###/####/#.##/..##
.#./.##/#.. => #.#./.##./###./#.##
##./.##/#.. => ..#./#..#/####/...#
#.#/.##/#.. => ####/.#.#/##../##.#
.##/.##/#.. => #.#./#..#/.#.#/.##.
###/.##/#.. => .#../.##./.##./.###
#../###/#.. => #..#/###./##.#/##..
.#./###/#.. => #.#./#..#/..#./#..#
##./###/#.. => ..../##.#/####/...#
..#/###/#.. => ..../#.../##../#..#
#.#/###/#.. => ..#./.#../..../##.#
.##/###/#.. => #..#/###./##.#/.###
###/###/#.. => #.../.##./#.##/.##.
.#./#.#/.#. => ...#/#.../.#../##.#
##./#.#/.#. => .#.#/#.#./.#../#.##
#.#/#.#/.#. => #.##/.##./###./....
###/#.#/.#. => ##../#..#/#.../.###
.#./###/.#. => ###./#.../.#../#..#
##./###/.#. => ##../##../#.../#...
#.#/###/.#. => ##../.#.#/#.##/#.#.
###/###/.#. => #.##/##.#/#.#./#...
#.#/..#/##. => ..../..#./####/..##
###/..#/##. => #.../...#/#.#./#.#.
.##/#.#/##. => ..##/###./.##./#...
###/#.#/##. => .#../###./##.#/...#
#.#/.##/##. => .###/##../.###/..#.
###/.##/##. => .#.#/##.#/.##./.###
.##/###/##. => ..#./.#.#/.#../#..#
###/###/##. => ###./#..#/####/...#
#.#/.../#.# => .#.#/.#../.#.#/#...
###/.../#.# => #..#/##../.#../...#
###/#../#.# => ..../.#../#.../..##
#.#/.#./#.# => #.#./####/.#.#/.##.
###/.#./#.# => ..#./####/#..#/..##
###/##./#.# => .##./.#../#.##/.#.#
#.#/#.#/#.# => ##../..##/##.#/#.#.
###/#.#/#.# => .##./#..#/#..#/.#.#
#.#/###/#.# => ..#./.###/#.##/#.##
###/###/#.# => ###./###./.#.#/###.
###/#.#/### => #.##/..##/#..#/...#
###/###/### => ...#/.#../##.#/.##.
